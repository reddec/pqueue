package internal

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Metadata) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	z.Version, err = dc.ReadUint16()
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	{
		var zb0002 byte
		zb0002, err = dc.ReadByte()
		if err != nil {
			err = msgp.WrapError(err, "PackageType")
			return
		}
		z.PackageType = PackagingType(zb0002)
	}
	z.Size, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	z.Attempts, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "Attempts")
		return
	}
	z.InlineData, err = dc.ReadBytes(z.InlineData)
	if err != nil {
		err = msgp.WrapError(err, "InlineData")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Metadata) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 5
	err = en.Append(0x95)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.Version)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	err = en.WriteByte(byte(z.PackageType))
	if err != nil {
		err = msgp.WrapError(err, "PackageType")
		return
	}
	err = en.WriteInt64(z.Size)
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	err = en.WriteInt64(z.Attempts)
	if err != nil {
		err = msgp.WrapError(err, "Attempts")
		return
	}
	err = en.WriteBytes(z.InlineData)
	if err != nil {
		err = msgp.WrapError(err, "InlineData")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Metadata) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 5
	o = append(o, 0x95)
	o = msgp.AppendUint16(o, z.Version)
	o = msgp.AppendByte(o, byte(z.PackageType))
	o = msgp.AppendInt64(o, z.Size)
	o = msgp.AppendInt64(o, z.Attempts)
	o = msgp.AppendBytes(o, z.InlineData)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Metadata) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	z.Version, bts, err = msgp.ReadUint16Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	{
		var zb0002 byte
		zb0002, bts, err = msgp.ReadByteBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "PackageType")
			return
		}
		z.PackageType = PackagingType(zb0002)
	}
	z.Size, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	z.Attempts, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Attempts")
		return
	}
	z.InlineData, bts, err = msgp.ReadBytesBytes(bts, z.InlineData)
	if err != nil {
		err = msgp.WrapError(err, "InlineData")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Metadata) Msgsize() (s int) {
	s = 1 + msgp.Uint16Size + msgp.ByteSize + msgp.Int64Size + msgp.Int64Size + msgp.BytesPrefixSize + len(z.InlineData)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PackagingType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 byte
		zb0001, err = dc.ReadByte()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = PackagingType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z PackagingType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteByte(byte(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z PackagingType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendByte(o, byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PackagingType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 byte
		zb0001, bts, err = msgp.ReadByteBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = PackagingType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z PackagingType) Msgsize() (s int) {
	s = msgp.ByteSize
	return
}
